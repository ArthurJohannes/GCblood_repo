ind1b <- c (1000,250,4000,400,1400,1000,4000,440,100,75,30,10,200,50,100,75)
cor (ind1b, ind2)
ind1b <- c (10000,250,4000,4000,1400,1000,40000,440,100,75,30,10,200,50,100,75)
cor (ind1b, ind2)
DEG1 <-ind1 [1:8] /ind1 [9:16]
DEG2b <- ind1b [1:8] /ind1b [9:16]
DEG1
DEG1 <-mean (ind1 [1:8]) /mean (ind1 [9:16])
DEG2 <-mean (ind2 [1:8]) /mean (ind2 [9:16])
DEG1 <-mean (ind1b [1:8]) /mean (ind1b [9:16])
cor (ind1,ind2b)
cor (ind1b,ind2)
DEG1
deg2
DEG2
1/DEG2
vervang <- ind1b [9:16] *10
ind1c <- c (ind1b [1:8], vervang [8:1])
iind1
ind1c
DEG1c <-mean (ind1c [1:8]) /mean (ind1c [9:16])
DEG1c
DEG2
cor (ind1c, ind2)
ind1c
ind2
vervang2 <- ind1b [9:16] *30
ind1d <- c (ind1b [1:8], vervang2 [8:1])
DEG1d <-mean (ind1d [1:8]) /mean (ind1d [9:16])
DEG1d
DEG2
cor (ind1d,ind2)
f <- rep (1, times = 16)
cor (ind1d,f)
f <- rep (c (1,0) times = c (8))
f <- rep (c (1,0), times = c (8))
cor (ind1d,f)
5 +5
5+5
5 +4
5+4
5+3
?tan ()
3+3
5+ 4
4+4
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
5+3
dir ()
4+3
5+4
4+3
3+2
4+3
5+5
4+5
3+3
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
3+4
2+2
2+2
4+2
5+4
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
1+2
4+2
2+3
2+2
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
3+2
2+1
3+3
dir ()
4+2
4+3
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
2+2
2+1
2+2
3+2
2+2
2+3
3+2
3+2
5+3
2+2
3+2
1+3
3+2
3+3
2^-1.414
2^-1.295
2^-1.295
2^-1.021
e^-1.414
ln (1)
loge (7)
log (1)
log (7)
2.71828^-1.414
2.71828^-1.295
2.71828^1.295
2.71828^-1.295
2.71828^-1.021
c (0.2431689 + 0.2738981 + 0.2738981 +  0.3602348) /4
ditte <-  c (1.36,	1.359,	2.786,	1.641,	0.053,	-0.379,	1.31,	0.003)
editte <- 2.71828^ditte
editte
t,test (editte [1:4], editte [5,8])
t.test (editte [1:4], editte [5,8])
t.test (editte [1:4], editte [5:8])
log2 (7.291201/1.612038 )
log2 (1.612038/7.291201 )
zbtb16 <-  c(-2.822,	-3.532,	-1.935,	-3.169,	4.008,	2.697,	2.497,	2.136)
ezbtb16 <-   2.71828^c(-2.822,	-3.532,	-1.935,	-3.169,	4.008,	2.697,	2.497,	2.136)
t.test (ezbtb16 [1:4], ezbtb16[5:8])
ezbtb16
t.test (ezbtb16 [1:4], ezbtb16 [5:8])
ezbtb16 <- c (ezbtb16, 10)
t.test (ezbtb16 [1:4], ezbtb16 [5:9])
ezbtb16 <- c (ezbtb16, 15)
t.test (ezbtb16 [1:4], ezbtb16 [5:10])
ezbtb16
alox15b <- c (1.196,	1.122,	0.525,	0.341,	4.073,	3.178,	2.939,	2.857)
ealox15b <-  2.71828^alox15b
ealoxa5b
ealox15b
t.test (ealox15b[1:4], ealox15b[5:10])
t.test (ealox15b[1:4], ealox15b[5:10],paired = TRUE)
t.test (ealox15b[1:4], ealox15b[5:8])
t.test (ealox15b[1:4], ealox15b[5:8],paired = TRUE)
t.test (c (1,2,3,4), c (20,23,27,31))
t.test (alox15b[1:4], alox15b[5:8])
zbtb16
t.test (zbtb16 [1:4], zbtb16 [5:8])
tsc22d3 <- c (1.48,	1.522,	2.176,	2.259,	4.642,	4.413,	4.854,	4.79)
t.test (tsc22d3[1:4], tsc22d3 [5:8])
etsc22d3  <- 2.71828^tsc22d3
etsc22d3
t.test (etsc22d3[1:4], etsc22d3 [5:8])
3+2
3+2
2+3
setwd("D:/voorgithub")
## use identifiers
## read all identifiers, = all genes on platforms)
identifiersGPL570 <- readRDS ("identifiers_gpl570.rds")
identifiersGPL10558 <- readRDS ("identifiers_gpl10558.rds")
## identifiersgse112101 <- readRDS (identifiers_gse112101.rds)
## identifiersgse60424 <- readRDS (identifiers_gse60424.rds)
#####################
## use identifiers
identifiers <- unique (c (identifiersGPL570,identifiersGPL10558))
#####################
#####################
## choose single query gene
## query <- "TSC22D3"
query <- "ADAMTS2"
#####################
#####################
## choose testgenes (gene module)
## testgenes <- c ("TSC22D3","PER1","ZBTB16","KLF9","CXCR4","DDIT4","IRS2")
testgenes <- c ("ADAMTS2","CD163","VSIG4","FLT3","ADORA3","OLAH","DAAM2")
#####################
setwd("~/GitHub/GCblood_repo/data/expressiontables_notsevere")
datasetnamesnotsevere <- dir ()
setwd("~/GitHub/GCblood_repo/data/expressiontables_severe")
datasetnamessevere <- dir ()
##setwd("C:/Users/Arthur/Desktop/bloodRNA/GDStables")
## setwd("D:/voorgithub/githubsepsisdatasets")
## setwd("D:/voorgithub/githubnonseveredatasets")
#####################
## choose datasets
datasetnames <- c (datasetnamesnotsevere,datasetnamessevere)
#####################
counter <- length (datasetnames)
query <- intersect (query, identifiers)
if (length (query) == 0){print ("gene absent, try gene alias")}
querycounter <- 0
averageprofile_df <- list ()
savelijstje <- list ()
jj <- query
querycounter <- querycounter + 1
allprofiles_list <- list ()
datasetnaam <- rep (c (""), times = 1000)
gennaam  <- rep (c (""), times = 1000)
datasetnr <- rep (c (0), times = 1000)
probeaantal<- rep (c (0), times = 1000)
counterb = 1
countery = 1
counterb = 1
countery = 1
for (j in datasetnames){
## counter <- counter -1
## setwd("C:/Users/Arthur/Desktop/bloodRNA/GDStables")
##if (j %in% datasetnames)  {setwd("D:/voorgithub/githubsepsisdatasets"); Tablegdsxxxx <- readRDS (j)}
if (j %in% datasetnamesnotsevere)  {setwd("~/GitHub/GCblood_repo/data/expressiontables_notsevere"); Tablegdsxxxx <- readRDS (j)}
if (j %in% datasetnamessevere)  { setwd("~/GitHub/GCblood_repo/data/expressiontables_severe"); Tablegdsxxxx <- readRDS (j)}
tTablegdsxxxx <- t (Tablegdsxxxx [, -c (1,2)])
colnames (tTablegdsxxxx) <- Tablegdsxxxx [,2]
probes <- which (colnames (tTablegdsxxxx) == jj)
if (class ( tTablegdsxxxx [,1]) != "numeric") { tTablegdsxxxx <- apply (tTablegdsxxxx, 2, as.numeric)}
probes <- which (colnames (tTablegdsxxxx) == jj)
gennaam <- jj
aantal <- length(probes)
counterx = 0
datasetnaam [counterb] <-  j
gennaam [counterb] <- gennaam
datasetnr [counterb] <- counterb
probeaantal [counterb] <- aantal
for (probe in probes){
tsc22d3cor <- cor (tTablegdsxxxx [,probe],tTablegdsxxxx)
b <-  tsc22d3cor [1, ]
tsc22d3ie <- - sort (-b)
df <- as.data.frame (tsc22d3ie)
df$IDENTIFIER <- names (tsc22d3ie)
colnames (df) [1] <-  paste (j, "nr" , probe, sep = "")
## zoveel <- counterx + countery
allprofiles_list [[counterx + countery]] <- df
###hoeft niet ## names (allprofiles_list)[counterx + countery] <- colnames (df) [1]
counterx <- counterx +1
}
countery <- countery + counterx
counter <- counter -1
counterb <- counterb +1
print ("files left to do:")
print (counter)
}
setwd("~/GitHub/GCblood_repo/data")
saveRDS (identifiersGPL570, file = "identifiers_gpl570.rds")
saveRDS (identifiersGPL10558, file = "identifiers_gpl10558.rds")
dir ()
setwd("~/GitHub/GCblood_repo/data")
## use identifiers
## read all identifiers, = all genes on platforms)
identifiersGPL570 <- readRDS ("identifiers_gpl570.rds")
identifiersGPL10558 <- readRDS ("identifiers_gpl10558.rds")
## identifiersgse112101 <- readRDS (identifiers_gse112101.rds)
## identifiersgse60424 <- readRDS (identifiers_gse60424.rds)
#####################
## use identifiers
identifiers <- unique (c (identifiersGPL570,identifiersGPL10558))
rm (list = ls ())
##  R script for finding transcriptomic datasets with strongly correlated query gene and module expression
##  and obtaining gene expression correlation profiles for query from selected datasets.
#####################
#### read all identifiers, is all genes on platforms GPL570 and GPL10558
setwd("~/GitHub/GCblood_repo/data")
identifiersGPL570 <- readRDS ("identifiers_gpl570.rds")
identifiersGPL10558 <- readRDS ("identifiers_gpl10558.rds")
identifiers <- unique (c (identifiersGPL570,identifiersGPL10558))
#####################
#####################
#### choose single query gene
## query <- "TSC22D3"
query <- "ADAMTS2"
query <- intersect (query, identifiers)
if (length (query) == 0){print ("gene absent, try gene alias")}
#####################
#####################
#### choose testgenes (gene module)
## testgenes <- c ("TSC22D3","PER1","ZBTB16","KLF9","CXCR4","DDIT4","IRS2")
testgenes <- c ("ADAMTS2","CD163","VSIG4","FLT3","ADORA3","OLAH","DAAM2")
#####################
#####################
#### read file names of dataset expression tables to use
setwd("~/GitHub/GCblood_repo/data/expressiontables_notsevere")
datasetnamesnotsevere <- dir ()
setwd("~/GitHub/GCblood_repo/data/expressiontables_severe")
datasetnamessevere <- dir ()
datasetnames <- c (datasetnamesnotsevere,datasetnamessevere)
#####################
#####################
####  collect gene expression profiles with query for each probe and in each dataset in allprofiles_list
counter <- length (datasetnames)
## query <- intersect (query, identifiers)
## if (length (query) == 0){print ("gene absent, try gene alias")}
## querycounter <- 0
## averageprofile_df <- list ()
## savelijstje <- list ()
## jj <- query
## querycounter <- querycounter + 1
allprofiles_list <- list ()
datasetnaam <- rep (c (""), times = 1000)
gennaam  <- rep (c (""), times = 1000)
datasetnr <- rep (c (0), times = 1000)
probeaantal<- rep (c (0), times = 1000)
counterb = 1
countery = 1
for (j in datasetnames){
if (j %in% datasetnamesnotsevere)  {setwd("~/GitHub/GCblood_repo/data/expressiontables_notsevere"); Tablegdsxxxx <- readRDS (j)}
if (j %in% datasetnamessevere)  { setwd("~/GitHub/GCblood_repo/data/expressiontables_severe"); Tablegdsxxxx <- readRDS (j)}
tTablegdsxxxx <- t (Tablegdsxxxx [, -c (1,2)])
colnames (tTablegdsxxxx) <- Tablegdsxxxx [,2]
probes <- which (colnames (tTablegdsxxxx) == query)
if (class ( tTablegdsxxxx [,1]) != "numeric") { tTablegdsxxxx <- apply (tTablegdsxxxx, 2, as.numeric)}
probes <- which (colnames (tTablegdsxxxx) == query)
gennaam <- query
aantal <- length(probes)
counterx = 0
datasetnaam [counterb] <-  j
gennaam [counterb] <- gennaam
datasetnr [counterb] <- counterb
probeaantal [counterb] <- aantal
for (probe in probes){
tsc22d3cor <- cor (tTablegdsxxxx [,probe],tTablegdsxxxx)
b <-  tsc22d3cor [1, ]
tsc22d3ie <- - sort (-b)
df <- as.data.frame (tsc22d3ie)
df$IDENTIFIER <- names (tsc22d3ie)
colnames (df) [1] <-  paste (j, "nr" , probe, sep = "")
## zoveel <- counterx + countery
allprofiles_list [[counterx + countery]] <- df
###hoeft niet ## names (allprofiles_list)[counterx + countery] <- colnames (df) [1]
counterx <- counterx +1
}
countery <- countery + counterx
counter <- counter -1
counterb <- counterb +1
print ("files left to do:")
print (counter)
}
###############################################################################
###############################################################################
head (allprofiles_list [[1]] [[3]])
head (allprofiles_list [[1]] [[1]])
names (allprofiles_list)
head (allprofiles_list [[5]] [[1]])
head (allprofiles_list  [[1]] [[1]])
head (allprofiles_list [[2]])
head (allprofiles_list [[50]])
head (allprofiles_list [[12]])
head (tsc22d3cor)
dim (tsc22d3cor)
class (tsc22d3cor)
tsc22d3cor [1:5]
tsc22d3cor [1,1:5]
tsc22d3ie [1,1:5]
head (tsc22d3ie)
dim (b)
b [1:5]
class (tsc22d3cor)
class (b)
rm (list = ls ())
#####################
#### read all identifiers, is all genes on platforms GPL570 and GPL10558
setwd("~/GitHub/GCblood_repo/data")
identifiersGPL570 <- readRDS ("identifiers_gpl570.rds")
identifiersGPL10558 <- readRDS ("identifiers_gpl10558.rds")
identifiers <- unique (c (identifiersGPL570,identifiersGPL10558))
#####################
#####################
#### choose single query gene
## query <- "TSC22D3"
query <- "ADAMTS2"
query <- intersect (query, identifiers)
if (length (query) == 0){print ("gene absent, try gene alias")}
#####################
#####################
#### choose testgenes (gene module)
## testgenes <- c ("TSC22D3","PER1","ZBTB16","KLF9","CXCR4","DDIT4","IRS2")
testgenes <- c ("ADAMTS2","CD163","VSIG4","FLT3","ADORA3","OLAH","DAAM2")
#####################
#####################
#### read file names of dataset expression tables to use
setwd("~/GitHub/GCblood_repo/data/expressiontables_notsevere")
datasetnamesnotsevere <- dir ()
setwd("~/GitHub/GCblood_repo/data/expressiontables_severe")
datasetnamessevere <- dir ()
datasetnames <- c (datasetnamesnotsevere,datasetnamessevere)
#####################
#####################
####  collect gene expression profiles with query for each probe and in each dataset in allprofiles_list
counterdatasetsdown <- length (datasetnames)
## query <- intersect (query, identifiers)
## if (length (query) == 0){print ("gene absent, try gene alias")}
## querycounter <- 0
## averageprofile_df <- list ()
## savelijstje <- list ()
## jj <- query
## querycounter <- querycounter + 1
allprofiles_list <- list ()
## room for up to 1000 profiles
datasetnaam <- rep (c (""), times = 1000)
## gennaam  <- rep (c (""), times = 1000)
datasetnr <- rep (c (0), times = 1000)
probeaantal<- rep (c (0), times = 1000)
counterdatasetsup = 1
counterprofiles = 1
for (j in datasetnames){
if (j %in% datasetnamesnotsevere)  {setwd("~/GitHub/GCblood_repo/data/expressiontables_notsevere"); expression_df <- readRDS (j)}
if (j %in% datasetnamessevere)  { setwd("~/GitHub/GCblood_repo/data/expressiontables_severe"); expression_df <- readRDS (j)}
expression_mat <- t (expression_df [, -c (1,2)])
colnames (expression_mat) <- expression_df [,2]
probes <- which (colnames (expression_mat) == query)
if (class ( expression_mat [,1]) != "numeric") { expression_mat <- apply (expression_mat, 2, as.numeric)}
probes <- which (colnames (expression_mat) == query)
## gennaam <- query
aantal <- length(probes)
counterprobesets = 0
datasetnaam [counterdatasetsup] <-  j
## gennaam [counterdatasetsup] <- gennaam
datasetnr [counterdatasetsup] <- counterdatasetsup
probeaantal [counterdatasetsup] <- aantal
for (probe in probes){
correlations_mat <- cor (expression_mat [,probe],expression_mat)
correlations_namednum <-  correlations_mat [1, ]
correlationsranked_namednum <- - sort (- correlations_namednum)
df <- as.data.frame (correlationsranked_namednum)
df$IDENTIFIER <- names (correlationsranked_namednum)
colnames (df) [1] <-  paste (j, "nr" , probe, sep = "")
## zoveel <- counterprobesets + counterprofiles
allprofiles_list [[counterprobesets + counterprofiles]] <- df
###hoeft niet ## names (allprofiles_list)[counterprobesets + counterprofiles] <- colnames (df) [1]
counterprobesets <- counterprobesets +1
}
counterprofiles <- counterprofiles + counterprobesets
counterdatasetsdown <- counterdatasetsdown -1
counterdatasetsup <- counterdatasetsup +1
print ("files left to do:")
print (counterdatasetsdown)
}
head (allprofiles_list [[48]])
head (allprofiles_list [[49]])
forintersect <- 25
#######################
allprofiles_listlength <- length (allprofiles_list)
vara <- character (); varb <- numeric (); varc <- numeric () ;vard <- list();for (i  in 1:allprofiles_listlength) {aa <- allprofiles_list [[i]]; bb <- as.character (aa [1:forintersect,2]); cc <- intersect (testgenes,bb);vara <- c (vara, colnames (aa) [1]); varb <- c (varb, i); varc <- c (varc,length (cc)); vard [[i]]<- cc}
df <- as.data.frame (cbind (vara,varb,varc))
df$vara <- as.character(df$vara)
df$varb <- as.numeric (as.character(df$varb))
df$varc <- as.numeric (as.character(df$varc))
dforder1 <- df [order (df$varc,decreasing = TRUE),]
##  vard intersect namen nog op volgorde zetten van voorkomen in dforder1, ook in bewaar
volgorde <- as.numeric (rownames (dforder1))
lengtevolgorde <- length (volgorde)
vardvolglist <- list ()
for (i in 1:lengtevolgorde) {vardvolglist [[i]] <- vard [[volgorde [i]]]}
rownames (dforder1) <- 1: dim (dforder1) [1]
head (dforder1)
vard [[1]]
vardvolglist [[1]]
#######################
## set number of top ranking genes in profile used for determining intersect with testgenes (now 25)
forintersect <- 25
#######################
allprofiles_listlength <- length (allprofiles_list)
profilename <- character (); profilenr <- numeric (); intersectsize <- numeric () ;intersectgene_list <- list();for (i  in 1:allprofiles_listlength) {aa <- allprofiles_list [[i]]; bb <- as.character (aa [1:forintersect,2]); cc <- intersect (testgenes,bb);profilename <- c (profilename, colnames (aa) [1]); profilenr <- c (profilenr, i); intersectsize <- c (intersectsize,length (cc)); intersectgene_list [[i]]<- cc}
df <- as.data.frame (cbind (profilename,profilenr,intersectsize))
df$profilename <- as.character(df$profilename)
df$profilenr <- as.numeric (as.character(df$profilenr))
df$intersectsize <- as.numeric (as.character(df$intersectsize))
dforder1 <- df [order (df$intersectsize,decreasing = TRUE),]
#### also keeping info for testgenes present in intersect, listing in right order
rightorder <- as.numeric (rownames (dforder1))
lengthrightorder <- length (rightorder)
intersectgeneordered_list <- list ()
for (i in 1:lengthrightorder) {intersectgeneordered_list [[i]] <- intersectgene_list [[rightorder [i]]]}
rownames (dforder1) <- 1: dim (dforder1) [1]
head (dforder1)
bestprofilenrs <- dforder1$profilenr [1:20]
## bestprofilenrs <- as.numeric (as.character (bestprofilenrs))
## tothier2 <- bestprofilenrs [length (bestprofilenrs)]
selectedprofiles_list <- list ()
## counternew <- 0 ;tothier2 <- bestprofilenrs [length (bestprofilenrs)]
counternew <- 0
for (j in bestprofilenrs){
counternew <- counternew + 1 ;selectedprofiles_list [[counternew]] <- aggregate (allprofiles_list[[j]] [,1], by = list (IDENTIFIER = allprofiles_list [[j]] [,2]), FUN = max)
}
##########################################################
selectedprofiles_list [[1]]
head (selectedprofiles_list [[1]])
averageprofile_df <- list ()
mergedprofiles_df <- as.data.frame (identifiers)
colnames (mergedprofiles_df) <- "IDENTIFIER"
lengtebestprofilenrs <- length (bestprofilenrs)
##  omschakelen van max correlatie waarde naar rank, meancorrelation en meanrank
for (j in 1:lengtebestprofilenrs){
mergedprofiles_df <- merge  (mergedprofiles_df, selectedprofiles_list [[j]], by = "IDENTIFIER", all.x = TRUE )
}
rlength <- nrow (mergedprofiles_df)
clength <- ncol (mergedprofiles_df)
for ( r in 1: rlength)
{mergedprofiles_df$Correlation [r] <-  rowMeans (mergedprofiles_df [r, 2:clength], na.rm = TRUE)
mergedprofiles_df$supporting_profiles [r] <- sum (!is.na(mergedprofiles_df [r, 2:clength]))
}
orderedmergedprofiles_df <- mergedprofiles_df [order (-mergedprofiles_df$Correlation), ]
averageprofile_df <- orderedmergedprofiles_df [, c (1, clength +1, clength + 2)]
rownames (averageprofile_df) <- 1: length (identifiers)
## saving final results and settings in list,
## but not large allprofiles_list and selectedprofiles_list
Results <- list ()
Results$alldatasetnames <- datasetnames
Results$query <- query
Results$testgenes <- testgenes
Results$topgenesnr <- length (bb)
Results$intersectgenes <- intersectgeneordered_list
Results$rankedprofiles <- dforder1
Results$selectedprofilenrs <- bestprofilenrs
Results$averageprofile_df <- averageprofile_df
names (Results$intersectgenes) <- as.character (Results$rankedprofiles$profilename)
## colnames  (Results$rankedprofiles) <- c ("profilename","profilenr","intersectsize")
print (names (Results))
print (Results$rankedprofiles [1:50,])
head (Results$averageprofile_df)
nrofsupportingdatasets <- 6
################################
use <-  Results$averageprofile_df [,3] > nrofsupportingdatasets - 1
print (Results$averageprofile_df [use,] [1:50,])
