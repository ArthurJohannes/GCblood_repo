#### CHOOSE, if especially checking for negative correlations (tails) set: FUN = min
for (j in filter){
allprofiles_list [[j]] <- aggregate (allprofiles_list[[j]] [,1], by = list (IDENTIFIER = allprofiles_list [[j]] [,2]), FUN = max)
}
#### use selected profiles to obtain one combined (merged) profile from all datasets with mean correlation values
#########################################################################################################
mergedprofiles_df <- as.data.frame (identifiers)
colnames (mergedprofiles_df) <- "IDENTIFIER"
for (j in filter){
mergedprofiles_df <- merge  (mergedprofiles_df, allprofiles_list [[j]], by = "IDENTIFIER", all.x = TRUE )
}
rlength <- nrow (mergedprofiles_df)
clength <- ncol (mergedprofiles_df)
for ( r in 1: rlength)
{mergedprofiles_df$Correlation [r] <-  rowMeans (mergedprofiles_df [r, 2:clength], na.rm = TRUE)
mergedprofiles_df$supporting_datasets [r] <- sum (!is.na(mergedprofiles_df [r, 2:clength]))
}
#### sort to rank all genes in combined profile according to mean correlation values with querygene
orderedmergedprofiles_df <- mergedprofiles_df [order (-mergedprofiles_df$Correlation), ]
averageprofiledf <- orderedmergedprofiles_df [, c (1, clength +1, clength + 2)]
rownames (averageprofiledf) <- 1: length (identifiers)
#### averageprofilesallqueries_list will, for each querygene, contain a single averaged gene expression correlation profile
#### using all datasets in the collection
averageprofilesallqueries_list [[querycounter]] <- averageprofiledf
if (length (checkfilter) == 0) {averageprofilesallqueries_list [[querycounter]] <- "no hits above threshold set at 5"}
if (length (checkfilter) == 1) {averageprofilesallqueries_list [[querycounter]] <- "just one hit above threshold set at 5"}
profilescore_list [[querycounter]] <- profilescore
print (paste (query [querycounter], "done", sep = " "))
}
names (profilescore_list) <- query
names (averageprofilesallqueries_list) <- query
################################################################################
#### PART 3 : PRINT RESULTS FOR AVERAGED GENE EXPRESSION CORRELATION PROFILES
################################################################################
####  in case of query genes without a resulting profile
usegood <- logical() ; for (i in 1:querylength){useg <- class (averageprofilesallqueries_list [[i]])!= "character"; usegood <- c (usegood,useg)}
usebad <- usegood == FALSE
allquerynumbers <- 1:querylength
goodquerynumbers <- allquerynumbers [usegood]
badquerynumbers <- allquerynumbers [usebad]
#### print overview of number of sets with gene and consistent hits in sets with gene
setnumbersunique <- numeric (); for (i in 1:querylength) {setnumberunique <- length (unique (profilescore_list [[i]] [,1])); setnumbersunique <- c (setnumbersunique, setnumberunique)}
consistenthitsall <- numeric (); for (i in 1:querylength) {if (length (intersect (i, goodquerynumbers)) == 1 ){consistenthits <- averageprofilesallqueries_list [[i]] [1,3]}else {consistenthits <- 0};consistenthitsall <- c (consistenthitsall,consistenthits ) }
overviewdf <-  as.data.frame (cbind (query, setnumbersunique, consistenthitsall))
colnames (overviewdf ) <- c ("gene","setswithgene","consistenthits")
print (overviewdf)
#### only shows results supported by more than 5 datasets in dataset collection (use >5)
for (i in goodquerynumbers){use <- averageprofilesallqueries_list [[i]] [,3] >5; print (averageprofilesallqueries_list [[i]] [use,][1:25,])}
#### in case code above was run with aggregate set to minus to see negative correlations (tails):
##   for (i in goodquerynumbers){use <- averageprofilesallqueries_list [[i]] [,3] >5; aa <- averageprofilesallqueries_list [[i]] [use,]; bb <- dim (aa) [1]; print (names (averageprofilesallqueries_list) [i]); cc <- bb-25 ;print (aa [bb:cc,])}
for (i in badquerynumbers) {print (query [i]); print (head (averageprofilesallqueries_list [[i]]))}
################################################################################
#### END
################################################################################
#################  R SCRIPT  SIGNATURESPROGRAMMATICALLY.R #####################################
####  COMBINING AVERAGED EXPRESSION CORRELATION PROFILES FOR SINGLE GENES TO DERIVE ROBUST GENE SIGNATURE
####  USING PRECALCULATED RESULTS OBTAINED WITH R SCRIPT SELECTPROGRAMMATICALLY.R
###############################################################################################
####  FIRST WITH 6 GENES FOR GC SIGNATURE 1
###############################################################################################
#####################
####  read precalculated results
setwd("~/GitHub/GCblood_repo/results/signatures")
forGCsignature1_list <- readRDS ("forGCsignature1.rds")
#####################
#####################
#### set minimal number of supporting datasets required for all genes present in each averageprofiledf  : use > 5
averageprofile_dfuse <- list ()
for (i in 1:6) {
file <-
forGCsignature1_list [[i]]; averageprofiledf <-
file$averageprofile_df;  use <-
averageprofiledf [,3] > 5 ; averageprofiledfuse <-
averageprofiledf [use,]; averageprofiledfuse$ranking <-
1:dim (averageprofiledfuse) [1]; averageprofile_dfuse [[i]] <-
averageprofiledfuse
}
#####################
#####################
####  combine 6 profiles in list averageprofile_dfuse for average of averages
merger1 <-
merge (averageprofile_dfuse [[1]], averageprofile_dfuse [[2]], by = "IDENTIFIER", all = TRUE)
for (i in c (3,4,5,6)) {
merger1 <-
merge (merger1, averageprofile_dfuse [[i]], by = "IDENTIFIER", all = TRUE)
}
merger1$meanranking <-
rowMeans (merger1 [,c (4,7,10,13,16,19)], na.rm = TRUE)
querygenes <- names (forGCsignature1_list)
mergercolnames <-
character () ; for (i in querygenes) {
begin <-
paste (c ("cor", "nr", "rank"), i, sep = "."); mergercolnames <-
c (mergercolnames, begin)
}
merger1order <-
merger1 [order (merger1$meanranking, decreasing = FALSE),]
colnames (merger1order) <- c ("gene", mergercolnames,"mean.rank")
rownames (merger1order) <- 1:dim (merger1order) [1]
merger1order$rank.mean <- 1:dim (merger1order) [1]
#####################
#####################
#### remove genes supported by too few profiles in total from all query genes
merger1order$sumofsupportingprofiles <- rowSums(merger1order [,c (3,6,9,12,15,18)], na.rm = TRUE)
hitwithmostgenequeries <- merger1order$sumofsupportingprofiles > 5*length (querygenes)
merger2order <- merger1order [hitwithmostgenequeries,]
rownames (merger2order) <- 1:dim (merger2order) [1]
merger2order$rank.mean <- 1:dim (merger2order) [1]
#####################
#####################
#### print results
print ("RANKED PROFILES FOR 6 GC SIGNATURE 1 QUERY GENES AND RANKED AVERAGED PROFILE")
print (head (merger2order))
print (merger2order [1:50, c (1, 20)])
#####################
setwd("~/GitHub/GCblood_repo/code")
dir ()
#################  R SCRIPT   SELECTPROGRAMMATICALLY.R #########################
####  SELECTING CORRELATION PROFILES FROM TRANSCRIPTOMIC DATASETS
####  (PROFILES WITH STRONG CORRELATION OF QUERY GENE AND TESTGENES EXPRESSION)
################################################################################
#### CHOOSE GENE QUERY, DATASETS, AND TESTGENES
################################################################################
#####################
#### read all identifiers (all genes on platforms GPL570 and GPL10558)
#### here in example are no RNAseq datasets, otherwise add more RNAseq identifiers
#### to allow new HUGO gene names and gene aliases absent from GPL570 and GPL10558
setwd("~/GitHub/GCblood_repo/data")
identifiersGPL570 <- readRDS ("identifiers_gpl570.rds")
identifiersGPL10558 <- readRDS ("identifiers_gpl10558.rds")
identifiers <- unique (c (identifiersGPL570,identifiersGPL10558))
#####################
#####################
#### choose single query gene
## query <- "PER1"
query <- "ADAMTS2"
query <- intersect (query, identifiers)
if (length (query) == 0) {
print ("gene absent, try gene alias")
}
#####################
#####################
#### choose testgenes (gene module)
## testgenes <- c ("TSC22D3","PER1","ZBTB16","KLF9","CXCR4","DDIT4","IRS2")
testgenes <-
c ("ADAMTS2","CD163","VSIG4","FLT3","ADORA3","OLAH","DAAM2")
#####################
#####################
#### read file names of dataset expression tables to use
setwd("~/GitHub/GCblood_repo/data/expressiontables_notsevere")
datasetnamesnotsevere <- dir ()
setwd("~/GitHub/GCblood_repo/data/expressiontables_severe")
datasetnamessevere <- dir ()
datasetnames <- c (datasetnamesnotsevere,datasetnamessevere)
#####################
###############################################################################
####  collect gene expression profiles with query for each probe
####  and in each dataset in allprofiles_list
###############################################################################
allprofiles_list <- list ()
#################
## just to keep some infos, room for up to 1000 profiles
namesofdatasets <- rep (c (""), times = 1000)
datasetnr <- rep (c (0), times = 1000)
nrofqueryprobesindataset <- rep (c (0), times = 1000)
#################
counterdatasetsdown <- length (datasetnames)
counterdatasetsup = 1
counterprofiles = 1
for (j in datasetnames) {
if (j %in% datasetnamesnotsevere)  {
setwd("~/GitHub/GCblood_repo/data/expressiontables_notsevere"); expression_df <-
readRDS (j)
}
if (j %in% datasetnamessevere)  {
setwd("~/GitHub/GCblood_repo/data/expressiontables_severe"); expression_df <-
readRDS (j)
}
expression_mat <- t (expression_df [,-c (1,2)])
colnames (expression_mat) <- expression_df [,2]
probes <- which (colnames (expression_mat) == query)
if (class (expression_mat [,1]) != "numeric") {
expression_mat <- apply (expression_mat, 2, as.numeric)
}
probes <- which (colnames (expression_mat) == query)
######################
## just to keep some infos
nrofprobesets <- length(probes)
namesofdatasets [counterdatasetsup] <-  j
datasetnr [counterdatasetsup] <- counterdatasetsup
nrofqueryprobesindataset [counterdatasetsup] <- nrofprobesets
######################
counterprobesets = 0
for (probe in probes) {
correlations_mat <- cor (expression_mat [,probe],expression_mat)
correlations_namednum <-  correlations_mat [1,]
correlationsranked_namednum <- -sort (-correlations_namednum)
df <- as.data.frame (correlationsranked_namednum)
df$IDENTIFIER <- names (correlationsranked_namednum)
colnames (df) [1] <-  paste (j, "nr" , probe, sep = "")
allprofiles_list [[counterprobesets + counterprofiles]] <- df
counterprobesets <- counterprobesets + 1
}
counterprofiles <- counterprofiles + counterprobesets
counterdatasetsdown <- counterdatasetsdown - 1
counterdatasetsup <- counterdatasetsup + 1
print ("files left to do:")
print (counterdatasetsdown)
}
###############################################################################
#### Ranking gene expression profiles based on number of testgenes hits
###############################################################################
######################
## set number of top ranking genes in profile used for determining intersect with testgenes (now 25)
forintersect <- 25
######################
allprofiles_listlength <- length (allprofiles_list)
profilename <-
character (); profilenr <-
numeric (); intersectsize <-
numeric () ;intersectgene_list <-
list();for (i  in 1:allprofiles_listlength) {
aa <-
allprofiles_list [[i]]; bb <-
as.character (aa [1:forintersect,2]); cc <-
intersect (testgenes,bb);profilename <-
c (profilename, colnames (aa) [1]); profilenr <-
c (profilenr, i); intersectsize <-
c (intersectsize,length (cc)); intersectgene_list [[i]] <- cc
}
df <- as.data.frame (cbind (profilename,profilenr,intersectsize))
df$profilename <- as.character(df$profilename)
df$profilenr <- as.numeric (as.character(df$profilenr))
df$intersectsize <- as.numeric (as.character(df$intersectsize))
dforder1 <- df [order (df$intersectsize,decreasing = TRUE),]
#### also keeping info for testgenes present in intersects, listing in right order
rightorder <- as.numeric (rownames (dforder1))
lengthrightorder <- length (rightorder)
intersectgeneordered_list <- list ()
for (i in 1:lengthrightorder) {
intersectgeneordered_list [[i]] <-
intersectgene_list [[rightorder [i]]]
}
rownames (dforder1) <- 1:dim (dforder1) [1]
###############################################################################
#### selecting top 20 profiles, aggregating genes for maximal correlation value
#### and saving in selectedprofiles_list
###############################################################################
bestprofilenrs <- dforder1$profilenr [1:20]
selectedprofiles_list <- list ()
counternew <- 0
for (j in bestprofilenrs) {
counternew <-
counternew + 1 ;selectedprofiles_list [[counternew]] <-
aggregate (
allprofiles_list[[j]] [,1], by = list (IDENTIFIER = allprofiles_list [[j]] [,2]), FUN = max
)
}
###############################################################################
#### averaging selected gene expression correlation profiles"
###############################################################################
averageprofile_df <- list ()
mergedprofiles_df <- as.data.frame (identifiers)
colnames (mergedprofiles_df) <- "IDENTIFIER"
lengthbestprofilenrs <- length (bestprofilenrs)
for (j in 1:lengthbestprofilenrs) {
mergedprofiles_df <-
merge  (mergedprofiles_df, selectedprofiles_list [[j]], by = "IDENTIFIER", all.x = TRUE)
}
rlength <- nrow (mergedprofiles_df)
clength <- ncol (mergedprofiles_df)
for (r in 1:rlength)
{
mergedprofiles_df$Correlation [r] <-
rowMeans (mergedprofiles_df [r, 2:clength], na.rm = TRUE)
mergedprofiles_df$supporting_profiles [r] <-
sum (!is.na(mergedprofiles_df [r, 2:clength]))
}
orderedmergedprofiles_df <-
mergedprofiles_df [order (-mergedprofiles_df$Correlation),]
averageprofile_df <-
orderedmergedprofiles_df [, c (1, clength + 1, clength + 2)]
rownames (averageprofile_df) <- 1:length (identifiers)
## saving final results and settings in  Results list,
## but not large allprofiles_list and selectedprofiles_list
Results <- list ()
Results$alldatasetnames <- datasetnames
Results$query <- query
Results$testgenes <- testgenes
Results$topgenesnr <- length (bb)
Results$intersectgenes <- intersectgeneordered_list
Results$rankedprofiles <- dforder1
Results$selectedprofilenrs <- bestprofilenrs
Results$averageprofile_df <- averageprofile_df
names (Results$intersectgenes) <-
as.character (Results$rankedprofiles$profilename)
#### check distribution of intersect sizes, optional, go back to inputs
#### "forintersect" (now 25: line 148) and "bestprofilenrs" (now 1:20: line 191) to optimize
#### and rerun
print ("OVERVIEW RESULTS")
print (names (Results))
print ("RANKED CORRELATION PROFILES FOR QUERY GENE FROM 30 DATASETS USING TESTGENES HITS")
print (Results$rankedprofiles)
######################
## set minimally required number of supporting profiles for gene in average profile (now 6)
nrofsupportingprofiles <- 6
######################
#### printaverage ranked correlation profile
use <-  Results$averageprofile_df [,3] > nrofsupportingprofiles - 1
print ("AVERAGED RANKED CORRELATION PROFILE FOR QUERY GENE FROM 20 PROFILES")
print (Results$averageprofile_df [use,] [1:50,])
######################################################################################
###################### END
######################################################################################
rm (list = ls ())
#####################
#### read all gene identifiers (all gene names on platforms GPL570 and GPL10558)
setwd("~/GitHub/GCblood_repo/data")
identifiersGPL570 <- readRDS ("identifiers_gpl570.rds")
identifiersGPL10558 <- readRDS ("identifiers_gpl10558.rds")
#### to include the more recent HUGO gene names and gene aliases absent from GPL570 and GPL10558
hugoandaliasdf <- readRDS ("hugoandaliasdf.rds")
identifiersinhugoandaliasdf <- c (hugoandaliasdf$aliasname, hugoandaliasdf$hugoname)
identifiers <- unique (c (identifiersGPL570,identifiersGPL10558,identifiersinhugoandaliasdf ))
#####################
#####################
#### CHOOSE multigene query (for example either query with TSC22D3 on collection not severe,
#### or query with ADAMTS2 on collection severe)
## query <- c ("ZBTB16","KLF9","DDIT4","TSC22D3","PER1","IRS2","CXCR4","FKBP5","CD163","VSIG4","ADAMTS2","FLT3","MAOA","AMPH","ADORA3","C5orf30","OLAH","DAAM2","ARG1")
## query <- c ("TSC22D3","PER1","ZBTB16","KLF9","CXCR4","DDIT4","IRS2")
query <- c ("ADAMTS2","CD163","VSIG4","FLT3","ADORA3","OLAH","DAAM2")
#####################
####################
#### CHOOSE dataset collections (here either collection not severe or collection severe)
#### by setting datasetnames in lines below
setwd("~/GitHub/GCblood_repo/data/expressiontables_notsevere")
datasetnamesnotsevere <- dir ()
setwd("~/GitHub/GCblood_repo/data/expressiontables_severe")
datasetnamessevere <- dir ()
## datasetnames <- datasetnamesnotsevere
datasetnames <- datasetnamessevere
#####################
################################################################################
#### PART 2 : CALCULATE AVERAGED GENE EXPRESSION CORRELATION PROFILES
################################################################################
query <- intersect (query, identifiers)
querycounter <- 0
querylength <- length (query)
allprofilesallqueries_list <- list ()
profilescore_list <- list ()
averageprofilesallqueries_list <- list ()
counterdown <- length (datasetnames)*querylength
for (querygene in query){
querycounter <- querycounter + 1
#### allprofiles_list will first contain gene expression correlation profiles for all probes
#### corresponding with a single querygene, obtained for all datasets in the collection
allprofiles_list <- list ()
samplesizes <- numeric ()
##### makes room for up to 1000 datasets in collection
namesofdatasets <- rep (c (""), times = 1000)
genename  <- rep (c (""), times = 1000)
datasetnr <- rep (c (0), times = 1000)
nrofqueryprobesindatasets<- rep (c (0), times = 1000)
counterdatasetup = 1
counterprofiles = 1
for (j in datasetnames){
if (j %in% datasetnamesnotsevere)  {setwd("~/GitHub/GCblood_repo/data/expressiontables_notsevere"); expressiontable <- readRDS (j)}
if (j %in% datasetnamessevere)  {setwd("~/GitHub/GCblood_repo/data/expressiontables_severe"); expressiontable <- readRDS (j)}
#### to exchange gene aliases in table for more recent HUGO gene names
genesintable <- as.character (expressiontable  [,2])
genestohugo <- intersect (hugoandaliasdf$aliasname, genesintable)
theseones <- numeric () ;for (i in genestohugo) {thisone <- which (hugoandaliasdf$aliasname == i); theseones <- c(theseones, thisone)}
hugoandaliasdfuse <- hugoandaliasdf [theseones,]
aliasestochange <- hugoandaliasdfuse$aliasname
genesintable2 <- genesintable ;counteralias <- 0; for (i in aliasestochange) {counteralias <- counteralias +1 ; thisone <- which (genesintable == i);  genesintable2 [thisone] <- hugoandaliasdfuse$hugoname [counteralias]}
expressiontable [,2] <- genesintable2
expressionmatrix <- t (expressiontable [, -c (1,2)])
colnames (expressionmatrix) <- expressiontable [,2]
#### taking probes as rownumbers in original expression table, not as ID_REFS
probes <- which (colnames (expressionmatrix) == querygene)
if (class ( expressionmatrix [,1]) != "numeric") { expressionmatrix <- apply (expressionmatrix, 2, as.numeric)}
probes <- which (colnames (expressionmatrix) == querygene)
probenr <- length(probes)
counterprobesets = 0
namesofdatasets [counterdatasetup] <-  j
genename [counterdatasetup] <- querygene
datasetnr [counterdatasetup] <- counterdatasetup
nrofqueryprobesindatasets [counterdatasetup] <- probenr
for (probe in probes){
correlations_namednum <- cor (expressionmatrix [,probe],expressionmatrix)
b <-  correlations_namednum [1, ]
#### sort to rank all gene probes in profile according to correlation value with querygene probe
correlationsranked_namednum <- - sort (-b)
df <- as.data.frame (correlationsranked_namednum)
df$IDENTIFIER <- names (correlationsranked_namednum)
colnames (df) [1] <-  paste (j, "nr" , probe, sep = "")
allprofiles_list [[counterprobesets + counterprofiles]] <- df
counterprobesets <- counterprobesets +1
}
counterprofiles <- counterprofiles + counterprobesets
counterdown <- counterdown -1
counterdatasetup <- counterdatasetup +1
print ("file reads left to do:")
print (counterdown)
}
#### select best correlation profiles based on consistent results of gene probes in and between datasets
#########################################################################################################
#### calculate mean intersect with other probe profiles for each separate probe profile
#### (take gene intersects of top 200 in ranked profiles)
ll <- length (allprofiles_list)
intersectmatrix <- matrix (nrow = ll, ncol = ll)
for (x in 1:ll){
for(y in 1:ll){
intersectmatrix [x,y]  <- length (intersect (allprofiles_list [[x]][1:200,2], allprofiles_list [[y]][1:200,2]))
}
}
intersectmatrix[ row(intersectmatrix) == col(intersectmatrix) ] <- 0
####  to plot intersect matrix for visual :
##  image (intersectmatrix)
kolmeans <- colMeans (intersectmatrix)
#### discarding inadequate probe profiles with low mean intersect of 5 or less
#### for smaller dataset collections use all available datasets with gene present
setnumber <- rep (as.numeric (datasetnr), times = (as.numeric(nrofqueryprobesindatasets)))
profilescore <- cbind (setnumber, kolmeans)
profilescore <- as.data.frame (profilescore)
datasetnrsused <- unique (profilescore$setnumber)
#### allprofilesallqueries_list will contain gene expression correlation profiles for all probes
#### corresponding with all querygenes, obtained for all datasets in the collection
allprofilesallqueries_list [[querycounter]] <- allprofiles_list
vectorintall1 <- as.integer ()
for (xx1 in datasetnrsused){
aa1 <- which (profilescore$setnumber == xx1)
use <-profilescore$kolmeans [aa1]     >5
##### for smaller dataset collections instead:
##### use <-profilescore$kolmeans [aa1]     > 0
vectorint1 <- aa1 [use]
vectorintall1 <- c (vectorintall1, vectorint1)
}
#### taking best probe profile for each dataset
vectorintall2 <- as.integer ()
for (xx2 in datasetnrsused){
aa2 <- which (profilescore$setnumber == xx2)
use <-profilescore$kolmeans [aa2] == max (profilescore$kolmeans [aa2])
#### in case of identical maxima in one dataset, only first profile used ([1])
vectorint2 <- aa2 [use] [1]
vectorintall2 <- c (vectorintall2, vectorint2)
}
#### only keeping one best probe profile for each dataset and probe should be adequate
#### if best probe in a dataset is inadequate, the profile (and corresponding dataset) is not used
filter <- intersect (vectorintall1, vectorintall2)
checkfilter <- filter
#### keep running, in case all probes for a querygene are inadequate in all (but one) datasets, remove later
checkvalues <- numeric () ; for (p in 1:ll) {checkvalue <- allprofiles_list [[p]] [1,1]; checkvalues <- c (checkvalues, checkvalue)}
valuesone <- which (checkvalues == 1)
if (length (filter) == 0){filter <- valuesone [1:2]}
if (length (filter) == 1){filter <- valuesone [1:2]}
#### for each gene in selected profiles uses the probe with maximal correlation value with the querygene
#########################################################################################################
#### CHOOSE, if especially checking for negative correlations (tails) set: FUN = min
for (j in filter){
allprofiles_list [[j]] <- aggregate (allprofiles_list[[j]] [,1], by = list (IDENTIFIER = allprofiles_list [[j]] [,2]), FUN = max)
}
#### use selected profiles to obtain one combined (merged) profile from all datasets with mean correlation values
#########################################################################################################
mergedprofiles_df <- as.data.frame (identifiers)
colnames (mergedprofiles_df) <- "IDENTIFIER"
for (j in filter){
mergedprofiles_df <- merge  (mergedprofiles_df, allprofiles_list [[j]], by = "IDENTIFIER", all.x = TRUE )
}
rlength <- nrow (mergedprofiles_df)
clength <- ncol (mergedprofiles_df)
for ( r in 1: rlength)
{mergedprofiles_df$Correlation [r] <-  rowMeans (mergedprofiles_df [r, 2:clength], na.rm = TRUE)
mergedprofiles_df$supporting_datasets [r] <- sum (!is.na(mergedprofiles_df [r, 2:clength]))
}
#### sort to rank all genes in combined profile according to mean correlation values with querygene
orderedmergedprofiles_df <- mergedprofiles_df [order (-mergedprofiles_df$Correlation), ]
averageprofiledf <- orderedmergedprofiles_df [, c (1, clength +1, clength + 2)]
rownames (averageprofiledf) <- 1: length (identifiers)
#### averageprofilesallqueries_list will, for each querygene, contain a single averaged gene expression correlation profile
#### using all datasets in the collection
averageprofilesallqueries_list [[querycounter]] <- averageprofiledf
if (length (checkfilter) == 0) {averageprofilesallqueries_list [[querycounter]] <- "no hits above threshold set at 5"}
if (length (checkfilter) == 1) {averageprofilesallqueries_list [[querycounter]] <- "just one hit above threshold set at 5"}
profilescore_list [[querycounter]] <- profilescore
print (paste (query [querycounter], "done", sep = " "))
}
names (profilescore_list) <- query
names (averageprofilesallqueries_list) <- query
################################################################################
#### PART 3 : PRINT RESULTS FOR AVERAGED GENE EXPRESSION CORRELATION PROFILES
################################################################################
####  in case of query genes without a resulting profile
usegood <- logical() ; for (i in 1:querylength){useg <- class (averageprofilesallqueries_list [[i]])!= "character"; usegood <- c (usegood,useg)}
usebad <- usegood == FALSE
allquerynumbers <- 1:querylength
goodquerynumbers <- allquerynumbers [usegood]
badquerynumbers <- allquerynumbers [usebad]
#### print overview of number of sets with gene and consistent hits in sets with gene
setnumbersunique <- numeric (); for (i in 1:querylength) {setnumberunique <- length (unique (profilescore_list [[i]] [,1])); setnumbersunique <- c (setnumbersunique, setnumberunique)}
consistenthitsall <- numeric (); for (i in 1:querylength) {if (length (intersect (i, goodquerynumbers)) == 1 ){consistenthits <- averageprofilesallqueries_list [[i]] [1,3]}else {consistenthits <- 0};consistenthitsall <- c (consistenthitsall,consistenthits ) }
overviewdf <-  as.data.frame (cbind (query, setnumbersunique, consistenthitsall))
colnames (overviewdf ) <- c ("gene","setswithgene","consistenthits")
print (overviewdf)
#### only shows results supported by more than 5 datasets in dataset collection (use >5)
for (i in goodquerynumbers){use <- averageprofilesallqueries_list [[i]] [,3] >5; print (averageprofilesallqueries_list [[i]] [use,][1:25,])}
#### in case code above was run with aggregate set to minus to see negative correlations (tails):
##   for (i in goodquerynumbers){use <- averageprofilesallqueries_list [[i]] [,3] >5; aa <- averageprofilesallqueries_list [[i]] [use,]; bb <- dim (aa) [1]; print (names (averageprofilesallqueries_list) [i]); cc <- bb-25 ;print (aa [bb:cc,])}
for (i in badquerynumbers) {print (query [i]); print (head (averageprofilesallqueries_list [[i]]))}
################################################################################
#### END
################################################################################
