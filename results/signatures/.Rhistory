library (shiny)
shinyApp(
ui = bootstrapPage(
selectizeInput("variable", "Variable:", c("One", "Two", "Three"),
multiple = TRUE,
options = list(maxItems = 2))
),
server = function(input, output) { }
)
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
library (gridExtra)
library (gridExtra)
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
library (gridExtra)
library (grid)
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
?qplot ()
qplot(x, y = NULL, ..., data, facets = NULL, margins = FALSE,
geom = "auto", xlim = c(NA, NA), ylim = c(NA, NA), log = "",
main = NULL, xlab = deparse(substitute(x)),
ylab = deparse(substitute(y)), asp = NA, stat = NULL, position = NULL)
qplot(x, y = NULL, data, facets = NULL, margins = FALSE,
geom = "auto", xlim = c(NA, NA), ylim = c(NA, NA), log = "",
main = NULL, xlab = deparse(substitute(x)),
ylab = deparse(substitute(y)), asp = NA, stat = NULL, position = NULL)
qplot(x, y = NULL, data, facets = NULL, margins = FALSE,
geom = "auto", xlim = c(NA, NA), log = "",
main = NULL, xlab = deparse(substitute(x)),
ylab = deparse(substitute(y)), asp = NA, stat = NULL, position = NULL)
qplot(mpg, wt, data = mtcars)
plot(mpg, wt, data = mtcars, size = cyl)
colnames (mtcars)
plot(mpg, wt, data = mtcars, size = mtcars$cyl)
plot(mtcars$mpg, mtcars$wt, data = mtcars, size = mtcars$cyl)
qplot(mpg, wt, data = mtcars, size = cyl)
qplot(mpg, wt, data = mtcars, size = 1)
qplot(mpg, wt, data = mtcars, size = 10)
qplot(mpg, wt, data = mtcars, size = 0.1)
summary (cyl)
a <  qplot(mpg, wt, data = mtcars, geom = "point")
qplot(mpg, wt, data = mtcars)
qplot(mpg, wt, data = mtcars, geom = "line")
qplot(mpg, wt, data = mtcars, geom = "point")
a <- qplot(mpg, wt, data = mtcars)
a
a <- qplot(mpg, wt, data = mtcars, geom = "point")
a
a <- qplot(mpg, wt, data = mtcars, geom = "line")
a
a <- qplot(mpg, wt, data = mtcars, geom = "line", size = 10)
a
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
a <- qplot(mpg, wt, data = mtcars, geom = "line", size = 10)
a <- a  + theme ( axis.text.x = element_blank ())
a
a <- qplot(mpg, wt, data = mtcars)
a < a + geom_line(size = 10)
a <- a + geom_line(size = 10)
a
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('F:/bloodCells09082018')
shiny::runApp('F:/bloodCells09082018')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodCells09082018')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
rm (list = ls ())
shiny::runApp('F:/bloodVisX112017')
shiny::runApp('F:/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
install.packages("WGCNA")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("RCytoscape")
library (RCytoscape)
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
library(shiny)
library(plotly)
ui <- fluidPage(
downloadButton('ExportPlot', 'Export as png'),
plotlyOutput("plot")
)
server <- function(input, output) {
# generate the plot
thePlot <- reactive({
p <- plot_ly(mtcars, x = ~mpg, y = ~wt)
})
# renderPlotly()
output$plot <- renderPlotly({
thePlot()
})
# download
output$ExportPlot <- downloadHandler(
# file name
filename <- 'plot.png',
# content
content = function(file){
# create plot
export(p = thePlot(), file = 'tempPlot.png')
# hand over the file
file.copy('tempPlot.png',file)
}
)
}
shinyApp(ui, server)
ui <- fluidPage(
downloadButton('ExportPlot', 'Export as png'),
plotlyOutput("plot")
)
server <- function(input, output) {
# generate the plot
thePlot <- reactive({
p <- plot_ly(mtcars, x = ~mpg, y = ~wt)
})
# renderPlotly()
output$plot <- renderPlotly({
thePlot()
})
# download
output$ExportPlot <- downloadHandler(
# file name
filename <- 'plot.png',
# content
content = function(file){
# create plot
export(p = thePlot(), file = 'tempPlot.png')
# hand over the file
file.copy('tempPlot.png',file)
}
)
}
shinyApp(ui, server)
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
a <- c(1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2)
b <- 2*a
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
head (gse11103meta)
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
4+4
dir ()
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
log (1)
log (o)
log (0)
exp (1)
log (2.718282)
2.718282 ^ 0.5
1.648721/6
vervalfn <- function (x) {2.718282^-0.2747868*x}
vervalfn(0)
vervalfn(6)
vervalfn <- function (x) {2.718282^(-0.2747868*x)}
vervalfn(0)
vervalfn(6)
log (1/2)
-0.6931472 /6
vervalfn <- function (x) {2.718282^( -0.1155245*x)}
vervalfn(0)
vervalfn(6)
vervalfn(24)
vervalfn(48)
vervalfn(76)
19800 *0.0001537992
dir ()
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
5 + 6
ir ()
dir ()
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
library (readxl)
dir ()
5 + 5
library (readxl)
5 +5
dir ()
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
dir ()
query <- "DAAM2"
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
dir ()
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
dir ()
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
install.packages("rJava")
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
funexp <- function (x) {2^x}
ind1 <- c (100,50,200,400,700,100,400,440,50,75,30,10,200,50,100,75)
ind2 <- c (10,8,15,20,3,15,19,20,80,100,75,200,50,300,110,50)
base1 <- c (1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0)
base2 <- c (0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1)
cor (base1,bas2)
cor (base1,base2)
cor (ind1,ind2)
ind1b <- c (1000,500,2000,4000,7000,1000,4000,4400,50,75,30,10,200,50,100,75)
cor (ind1b,ind2)
ind1b <- c (1000,250,4000,400,1400,1000,4000,440,100,75,30,10,200,50,100,75)
cor (ind1b, ind2)
ind1b <- c (10000,250,4000,4000,1400,1000,40000,440,100,75,30,10,200,50,100,75)
cor (ind1b, ind2)
DEG1 <-ind1 [1:8] /ind1 [9:16]
DEG2b <- ind1b [1:8] /ind1b [9:16]
DEG1
DEG1 <-mean (ind1 [1:8]) /mean (ind1 [9:16])
DEG2 <-mean (ind2 [1:8]) /mean (ind2 [9:16])
DEG1 <-mean (ind1b [1:8]) /mean (ind1b [9:16])
cor (ind1,ind2b)
cor (ind1b,ind2)
DEG1
deg2
DEG2
1/DEG2
vervang <- ind1b [9:16] *10
ind1c <- c (ind1b [1:8], vervang [8:1])
iind1
ind1c
DEG1c <-mean (ind1c [1:8]) /mean (ind1c [9:16])
DEG1c
DEG2
cor (ind1c, ind2)
ind1c
ind2
vervang2 <- ind1b [9:16] *30
ind1d <- c (ind1b [1:8], vervang2 [8:1])
DEG1d <-mean (ind1d [1:8]) /mean (ind1d [9:16])
DEG1d
DEG2
cor (ind1d,ind2)
f <- rep (1, times = 16)
cor (ind1d,f)
f <- rep (c (1,0) times = c (8))
f <- rep (c (1,0), times = c (8))
cor (ind1d,f)
5 +5
5+5
5 +4
5+4
5+3
?tan ()
3+3
5+ 4
4+4
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
5+3
dir ()
4+3
5+4
4+3
3+2
4+3
5+5
4+5
3+3
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
3+4
2+2
2+2
4+2
5+4
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
1+2
4+2
2+3
2+2
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX112017')
3+2
2+1
3+3
dir ()
4+2
4+3
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
shiny::runApp('C:/Users/Arthur/Desktop/CourseraR/shinyoefening/bloodVisX')
2+2
2+1
2+2
3+2
2+2
2+3
3+2
3+2
5+3
2+2
3+2
1+3
3+2
3+3
2^-1.414
2^-1.295
2^-1.295
2^-1.021
e^-1.414
ln (1)
loge (7)
log (1)
log (7)
2.71828^-1.414
2.71828^-1.295
2.71828^1.295
2.71828^-1.295
2.71828^-1.021
c (0.2431689 + 0.2738981 + 0.2738981 +  0.3602348) /4
ditte <-  c (1.36,	1.359,	2.786,	1.641,	0.053,	-0.379,	1.31,	0.003)
editte <- 2.71828^ditte
editte
t,test (editte [1:4], editte [5,8])
t.test (editte [1:4], editte [5,8])
t.test (editte [1:4], editte [5:8])
log2 (7.291201/1.612038 )
log2 (1.612038/7.291201 )
zbtb16 <-  c(-2.822,	-3.532,	-1.935,	-3.169,	4.008,	2.697,	2.497,	2.136)
ezbtb16 <-   2.71828^c(-2.822,	-3.532,	-1.935,	-3.169,	4.008,	2.697,	2.497,	2.136)
t.test (ezbtb16 [1:4], ezbtb16[5:8])
ezbtb16
t.test (ezbtb16 [1:4], ezbtb16 [5:8])
ezbtb16 <- c (ezbtb16, 10)
t.test (ezbtb16 [1:4], ezbtb16 [5:9])
ezbtb16 <- c (ezbtb16, 15)
t.test (ezbtb16 [1:4], ezbtb16 [5:10])
ezbtb16
alox15b <- c (1.196,	1.122,	0.525,	0.341,	4.073,	3.178,	2.939,	2.857)
ealox15b <-  2.71828^alox15b
ealoxa5b
ealox15b
t.test (ealox15b[1:4], ealox15b[5:10])
t.test (ealox15b[1:4], ealox15b[5:10],paired = TRUE)
t.test (ealox15b[1:4], ealox15b[5:8])
t.test (ealox15b[1:4], ealox15b[5:8],paired = TRUE)
t.test (c (1,2,3,4), c (20,23,27,31))
t.test (alox15b[1:4], alox15b[5:8])
zbtb16
t.test (zbtb16 [1:4], zbtb16 [5:8])
tsc22d3 <- c (1.48,	1.522,	2.176,	2.259,	4.642,	4.413,	4.854,	4.79)
t.test (tsc22d3[1:4], tsc22d3 [5:8])
etsc22d3  <- 2.71828^tsc22d3
etsc22d3
t.test (etsc22d3[1:4], etsc22d3 [5:8])
3+2
3+2
3+2
setwd("~/GitHub/GCblood_repo/results/signatures")
dir ()
forGCsignature1_list <- readRDS ("forGCsignature1.rds")
head (forGCsignature1_list$TSC22D3$averageprofile_df)
averageprofile_dfuse <- list ()
for (i in 1:7){file <- forGCsignature1_list [[i]]; vang <- file$averageprofile_df;  use <- vang [,3] > 5 ; vanguse <- vang [use,]; vanguse$ranking <- 1:dim (vanguse) [1]; averageprofile_dfuse [[i]] <- vanguse }
head (averageprofile_dfuse [[1]])
merger1 <- merge (averageprofile_dfuse [[1]], averageprofile_dfuse [[2]], by = "IDENTIFIER", all = TRUE)
head (merger1)
for (i in 3:7) {merger1 <- merge (merger1, averageprofile_dfuse [[i]], by = "IDENTIFIER", all = TRUE)}
names (averageprofile_dfuse)
names (forGCsignature1_list)
merger1 <- merge (averageprofile_dfuse [[1]], averageprofile_dfuse [[2]], by = "IDENTIFIER", all = TRUE)
for (i in c (3,4,6,7)) {merger1 <- merge (merger1, averageprofile_dfuse [[i]], by = "IDENTIFIER", all = TRUE)}
merger1$meanranking <- rowMeans (merger1 [,c (4,7,10,13,16,19)], na.rm = TRUE)
forsignature1genes <- query [-5]
querygenes <- c ("TSC22D3","PER1","ZBTB16","KLF9","DDIT4","IRS2")
allemaal <- character () ; for (i in querygenes) {begin <- paste (i, c ("cor", "nr", "rank"), i, sep = "."); allemaal <- c (allemaal, begin)}
allemaal
allemaal <- character () ; for (i in querygenes) {begin <- paste (c ("cor", "nr", "rank"), i, sep = "."); allemaal <- c (allemaal, begin)}
allemaal
colnames (merger1order) <- c ("gene", allemaal,"mean.rank")
## rownames (merger1order) <- 1:dim (merger1order) [1]
merger1order <- merger1 [order (merger1$meanranking, decreasing = FALSE),]
colnames (merger1order) <- c ("gene", allemaal,"mean.rank")
rownames (merger1order) <- 1:dim (merger1order) [1]
merger1order$rank.mean <- 1:dim (merger1order) [1]
head (merger1order)
head (merger1order [1:50, c (1,2,4,14,16,21,22)])
head (merger1order [1:50, c (1,2,4,14,16,20,21)])
merger1order [1:50, c (1,2,4,14,16,20,21)]
head (merger1order)
setwd("~/GitHub/GCblood_repo/results/signatures")
forGCsignature1_list <- readRDS ("forGCsignature1.rds")
##   set use > 10
averageprofile_dfuse <- list ()
for (i in 1:7){file <- forGCsignature1_list [[i]]; vang <- file$averageprofile_df;  use <- vang [,3] > 10 ; vanguse <- vang [use,]; vanguse$ranking <- 1:dim (vanguse) [1]; averageprofile_dfuse [[i]] <- vanguse }
## merge but leave out profile for CXCR4
merger1 <- merge (averageprofile_dfuse [[1]], averageprofile_dfuse [[2]], by = "IDENTIFIER", all = TRUE)
for (i in c (3,4,6,7)) {merger1 <- merge (merger1, averageprofile_dfuse [[i]], by = "IDENTIFIER", all = TRUE)}
querygenes <- c ("TSC22D3","PER1","ZBTB16","KLF9","DDIT4","IRS2")
allemaal <- character () ; for (i in querygenes) {begin <- paste (c ("cor", "nr", "rank"), i, sep = "."); allemaal <- c (allemaal, begin)}
merger1order <- merger1 [order (merger1$meanranking, decreasing = FALSE),]
colnames (merger1order) <- c ("gene", allemaal,"mean.rank")
rownames (merger1order) <- 1:dim (merger1order) [1]
merger1order$rank.mean <- 1:dim (merger1order) [1]
setwd("~/GitHub/GCblood_repo/results/signatures")
forGCsignature1_list <- readRDS ("forGCsignature1.rds")
##   set use > 10
averageprofile_dfuse <- list ()
for (i in 1:7){file <- forGCsignature1_list [[i]]; vang <- file$averageprofile_df;  use <- vang [,3] > 10 ; vanguse <- vang [use,]; vanguse$ranking <- 1:dim (vanguse) [1]; averageprofile_dfuse [[i]] <- vanguse }
## merge but leave out profile for CXCR4
merger1 <- merge (averageprofile_dfuse [[1]], averageprofile_dfuse [[2]], by = "IDENTIFIER", all = TRUE)
for (i in c (3,4,6,7)) {merger1 <- merge (merger1, averageprofile_dfuse [[i]], by = "IDENTIFIER", all = TRUE)}
merger1$meanranking <- rowMeans (merger1 [,c (4,7,10,13,16,19)], na.rm = TRUE)
querygenes <- c ("TSC22D3","PER1","ZBTB16","KLF9","DDIT4","IRS2")
allemaal <- character () ; for (i in querygenes) {begin <- paste (c ("cor", "nr", "rank"), i, sep = "."); allemaal <- c (allemaal, begin)}
merger1order <- merger1 [order (merger1$meanranking, decreasing = FALSE),]
colnames (merger1order) <- c ("gene", allemaal,"mean.rank")
rownames (merger1order) <- 1:dim (merger1order) [1]
merger1order$rank.mean <- 1:dim (merger1order) [1]
head (merger1order)
merger1order [1:50,]
forGCsignature1_list <- readRDS ("forGCsignature1.rds")
##   set use > 10
averageprofile_dfuse <- list ()
for (i in 1:7){file <- forGCsignature1_list [[i]]; vang <- file$averageprofile_df;  use <- vang [,3] > 6 ; vanguse <- vang [use,]; vanguse$ranking <- 1:dim (vanguse) [1]; averageprofile_dfuse [[i]] <- vanguse }
## merge but leave out profile for CXCR4
merger1 <- merge (averageprofile_dfuse [[1]], averageprofile_dfuse [[2]], by = "IDENTIFIER", all = TRUE)
for (i in c (3,4,6,7)) {merger1 <- merge (merger1, averageprofile_dfuse [[i]], by = "IDENTIFIER", all = TRUE)}
merger1$meanranking <- rowMeans (merger1 [,c (4,7,10,13,16,19)], na.rm = TRUE)
querygenes <- c ("TSC22D3","PER1","ZBTB16","KLF9","DDIT4","IRS2")
allemaal <- character () ; for (i in querygenes) {begin <- paste (c ("cor", "nr", "rank"), i, sep = "."); allemaal <- c (allemaal, begin)}
merger1order <- merger1 [order (merger1$meanranking, decreasing = FALSE),]
colnames (merger1order) <- c ("gene", allemaal,"mean.rank")
rownames (merger1order) <- 1:dim (merger1order) [1]
merger1order$rank.mean <- 1:dim (merger1order) [1]
merger1order [1:50,]
setwd("~/GitHub/GCblood_repo/results/signatures")
forGCsignature1_list <- readRDS ("forGCsignature1.rds")
##   set use > 5
averageprofile_dfuse <- list ()
for (i in 1:7){file <- forGCsignature1_list [[i]]; vang <- file$averageprofile_df;  use <- vang [,3] > 5 ; vanguse <- vang [use,]; vanguse$ranking <- 1:dim (vanguse) [1]; averageprofile_dfuse [[i]] <- vanguse }
## merge but leave out profile for CXCR4
merger1 <- merge (averageprofile_dfuse [[1]], averageprofile_dfuse [[2]], by = "IDENTIFIER", all = TRUE)
for (i in c (3,4,6,7)) {merger1 <- merge (merger1, averageprofile_dfuse [[i]], by = "IDENTIFIER", all = TRUE)}
merger1$meanranking <- rowMeans (merger1 [,c (4,7,10,13,16,19)], na.rm = TRUE)
querygenes <- c ("TSC22D3","PER1","ZBTB16","KLF9","DDIT4","IRS2")
allemaal <- character () ; for (i in querygenes) {begin <- paste (c ("cor", "nr", "rank"), i, sep = "."); allemaal <- c (allemaal, begin)}
merger1order <- merger1 [order (merger1$meanranking, decreasing = FALSE),]
colnames (merger1order) <- c ("gene", allemaal,"mean.rank")
rownames (merger1order) <- 1:dim (merger1order) [1]
merger1order$rank.mean <- 1:dim (merger1order) [1]
merger1order [1:50,]
setwd("~/GitHub/GCblood_repo/results/signatures")
forGCsignature2_list <- readRDS ("forGCsignature2.rds")
##   set use > 5
averageprofile_dfuse <- list ()
for (i in 1:7){file <- forGCsignature2_list [[i]]; vang <- file$averageprofile_df;  use <- vang [,3] > 5 ; vanguse <- vang [use,]; vanguse$ranking <- 1:dim (vanguse) [1]; averageprofile_dfuse [[i]] <- vanguse }
names (forGCsignature2_list)
querygenes <- names (forGCsignature2_list)
merger1 <- merge (averageprofile_dfuse [[1]], averageprofile_dfuse [[2]], by = "IDENTIFIER", all = TRUE)
for (i in c (3:7)) {merger1 <- merge (merger1, averageprofile_dfuse [[i]], by = "IDENTIFIER", all = TRUE)}
merger1$meanranking <- rowMeans (merger1 [,c (4,7,10,13,16,19,22)], na.rm = TRUE)
allemaal <- character () ; for (i in querygenes) {begin <- paste (c ("cor", "nr", "rank"), i, sep = "."); allemaal <- c (allemaal, begin)}
merger1order <- merger1 [order (merger1$meanranking, decreasing = FALSE),]
colnames (merger1order) <- c ("gene", allemaal,"mean.rank")
rownames (merger1order) <- 1:dim (merger1order) [1]
merger1order$rank.mean <- 1:dim (merger1order) [1]
head (merger1order)
merger1order [1:100,]
